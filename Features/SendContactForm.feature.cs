// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestingToolshopDemoWithSelenium.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SendContactForm")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class SendContactFormFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SendContactForm", "As a user, I want to be able to navigate to the contact page, fill out a contact " +
                "form, \r\nand submit it to receive a confirmation message.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "SendContactForm.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I fill out the contact form with valid information and receive a confirmation mes" +
            "sage")]
        [NUnit.Framework.CategoryAttribute("happy")]
        [NUnit.Framework.TestCaseAttribute("John", "Doe", "john.doe@gmail.com", "\"Return\"", "\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor i" +
            "ncididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru" +
            "d exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\"", null)]
        public async System.Threading.Tasks.Task IFillOutTheContactFormWithValidInformationAndReceiveAConfirmationMessage(string firstName, string lastName, string email, string subject, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "happy"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("subject", subject);
            argumentsOfScenario.Add("message", message);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("I fill out the contact form with valid information and receive a confirmation mes" +
                    "sage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("I am on the contact page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "Subject",
                            "Message"});
                table5.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", subject),
                            string.Format("{0}", message)});
#line 9
 await testRunner.WhenAsync("I fill out the contact form with the following information:", ((string)(null)), table5, "When ");
#line hidden
#line 12
 await testRunner.AndAsync("I click on the \"Send\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.ThenAsync("I receive a confirmation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I try to submit the contact form with no entered information")]
        [NUnit.Framework.CategoryAttribute("sad")]
        [NUnit.Framework.TestCaseAttribute("", "", "", "", "", null)]
        public async System.Threading.Tasks.Task ITryToSubmitTheContactFormWithNoEnteredInformation(string firstName, string lastName, string email, string subject, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "sad"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("subject", subject);
            argumentsOfScenario.Add("message", message);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("I try to submit the contact form with no entered information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
 await testRunner.GivenAsync("I am on the contact page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "Subject",
                            "Message"});
                table6.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", subject),
                            string.Format("{0}", message)});
#line 21
 await testRunner.WhenAsync("I fill out the contact form with the following information:", ((string)(null)), table6, "When ");
#line hidden
#line 24
 await testRunner.AndAsync("I click on the \"Send\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.ThenAsync("I receive an error message for each field on the contact form", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I try to submit the contact form with various message lengths")]
        [NUnit.Framework.TestCaseAttribute("John", "Doe", "john.doe@gmail.com", "\"Return\"", "", null)]
        [NUnit.Framework.TestCaseAttribute("John", "Doe", "john.doe@gmail.com", "\"Return\"", "\"L\"", null)]
        [NUnit.Framework.TestCaseAttribute("John", "Doe", "john.doe@gmail.com", "\"Return\"", "\"Lorem ipsum dolor sit amet, consectetuer adipisci\"", null)]
        [NUnit.Framework.TestCaseAttribute("John", "Doe", "john.doe@gmail.com", "\"Return\"", "\"Lorem ipsum dolor sit amet, consectetuer adipiscin\"", null)]
        [NUnit.Framework.TestCaseAttribute("John", "Doe", "john.doe@gmail.com", "\"Return\"", "\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula " +
            "eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient " +
            "montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu" +
            ", pretium.\"", null)]
        [NUnit.Framework.TestCaseAttribute("John", "Doe", "john.doe@gmail.com", "\"Return\"", "\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula " +
            "eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient " +
            "montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu" +
            ", pretium q\"", null)]
        public async System.Threading.Tasks.Task ITryToSubmitTheContactFormWithVariousMessageLengths(string firstName, string lastName, string email, string subject, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("subject", subject);
            argumentsOfScenario.Add("message", message);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("I try to submit the contact form with various message lengths", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 31
 await testRunner.GivenAsync("I am on the contact page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "Subject",
                            "Message"});
                table7.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", subject),
                            string.Format("{0}", message)});
#line 32
 await testRunner.WhenAsync("I fill out the contact form with the following information:", ((string)(null)), table7, "When ");
#line hidden
#line 35
 await testRunner.AndAsync("I click on the \"Send\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
 await testRunner.ThenAsync("I receive an error or success message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
